import { PrismaClient } from "@prisma/client";
import Revalidate from "../components/core/revalidate";
import { getServerSession } from "next-auth/next"; // Import useSession
// import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import { authOptions } from "@/lib/authOptions/authOptions"
import DeleteBot from "./deleteBot";
import { Metadata } from "next";
import ToogleBot from "@/components/fragments/toggleStatusBot";
const prisma = new PrismaClient();

type listBot = {
  id: number,
  namaBot: string,
  status: string,
  world: string,
  uptime: string,
  lastUpdate: string,
  botInfo: string
}

export const metadata: Metadata = {
  title: 'Table Bot by Mifuzi',
  description: 'Generated by create next app',
}

// Anda perlu menyediakan userId saat memanggil fungsi ini
async function getData(userId: any){
  await new Promise((r) => setTimeout(r, 1000));
  const bots = await prisma.listBot.findMany({
    where: {
      userId: userId,
    },
  });
  return bots;
}


async function getBotStatus(userId: any){
  await new Promise((r) => setTimeout(r, 1000));
  const bots = await prisma.user.findFirst({
    select: {
      status_bot: true
    },
    where: {
      id: userId
    }
  });
  return bots;
}

export default async function Home() {
  const session = await getServerSession(authOptions); //// Use useSession to get the session data
  const userId = session?.user?.id; // Get the user id from the session
  const [data, botStatus] = await Promise.all([
    getData(userId), 
    getBotStatus(userId)
  ]);
  return (
    <div className="flex pt-5">
      <div className="flex-grow items-center justify-center">
        <div className="flex flex-col items-center justify-start">
          <div className="col-md-12">
            <div className="card border border-gray-300">
              <div className="card-body">
                <p className="text-sm w-fit">Set Status Bot:</p>
                  <ToogleBot status={botStatus?.status_bot || ""}/>
                <p className={`text-white text-sm font-medium w-[75px] text-center rounded-md ${botStatus?.status_bot === "Online" ? "bg-success": "bg-[rgb(255,70,84)]"}`}>{botStatus?.status_bot}</p>
                <h5 className="card-main-title">Bot Status Table</h5>
                <div className="table-responsive">
                  <table className="table table-zebra">
                    <thead>
                      <tr className="bg-base-200">
                        <th>Slot</th>
                        <th>Nama Bot</th>
                        <th>Status</th>
                        <th>World</th>
                        <th>Uptime</th>
                        <th>Last Update</th>
                        <th>Bot Info</th>
                        <th>Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {data.sort((a, b) => a.id - b.id).map((bot) => (
                        <tr key={bot.id}>
                          <td>{bot.id}</td>
                          <td>{bot.namaBot}</td>
                          <td className={bot.status === "Online" ? "text-success" : bot.status === "Banned" ? "text-warning" : "text-error"}>{bot.status}</td>
                          <td>{bot.world}</td>
                          <td>{bot.uptime}</td>
                          <td>{bot.lastUpdate}</td>
                          <td className={bot.botInfo === "Suspended" ? "text-error" : ""}>{bot.botInfo}</td>
                          <td><DeleteBot bot={bot}/></td>
                        </tr>
                      ))}
                      {data.length === 0 && <tr><td colSpan={7} className="text-center">No data available</td></tr>}
                    </tbody>
                  </table>
                    {<Revalidate/>}
                  <div className="flex justify-center mt-10">
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      </div>
  );
}
